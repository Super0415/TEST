<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GEC4010.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GEC4010.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Sep 19 12:06:22 2018
<BR><P>
<H3>Maximum Stack Usage =        108 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; USART485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[63]">__user_initial_stackheap</a>
 <LI><a href="#[69]">OS_CPU_SR_Save</a>
 <LI><a href="#[6a]">OS_CPU_SR_Restore</a>
 <LI><a href="#[be]">OSCtxSw</a>
 <LI><a href="#[bb]">OSIntCtxSw</a>
 <LI><a href="#[c0]">OSStartHighRdy</a>
 <LI><a href="#[b]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3c]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC3_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from fwcortex.o(i.ADC1_2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from fwcortex.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from fwcortex.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from fwcortex.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from fwcortex.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from fwcortex.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from fwcortex.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from fwcortex.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from fwcortex.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from fwcortex.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from fwcortex.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from fwcortex.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from fwcortex.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from fwcortex.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from fwcortex.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from fwcortex.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from fwcortex.o(i.EXTI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from fwcortex.o(i.EXTI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from fwcortex.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from fwcortex.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from fwcortex.o(i.FLASH_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">FWCan1Task</a> from fwcortex.o(i.FWCan1Task) referenced from fwcortex.o(i.OSTaskStat)
 <LI><a href="#[50]">FWDbTask</a> from fwcortex.o(i.FWDbTask) referenced from fwcortex.o(i.OSTaskStat)
 <LI><a href="#[51]">FWLcdTask</a> from fwcortex.o(i.FWLcdTask) referenced from fwcortex.o(i.OSTaskStat)
 <LI><a href="#[4f]">FWSci1Task</a> from fwcortex.o(i.FWSci1Task) referenced from fwcortex.o(i.OSTaskStat)
 <LI><a href="#[4d]">FWXioTask</a> from fwcortex.o(i.FWXioTask) referenced from fwcortex.o(i.OSTaskStat)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from fwcortex.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from fwcortex.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from fwcortex.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from fwcortex.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">OSTaskIdle</a> from oscortex.o(i.OSTaskIdle) referenced from oscortex.o(i.OSInit)
 <LI><a href="#[4c]">OSTaskStat</a> from fwcortex.o(i.OSTaskStat) referenced from oscortex.o(i.OSInit)
 <LI><a href="#[e]">PVD_IRQHandler</a> from fwcortex.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from asmcortex.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from fwcortex.o(i.RCC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from fwcortex.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from fwcortex.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from fwcortex.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from fwcortex.o(i.SPI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from fwcortex.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from fwcortex.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from fwcortex.o(i.TAMPER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from fwcortex.o(i.TIM1_BRK_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from fwcortex.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from fwcortex.o(i.TIM1_TRG_COM_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from fwcortex.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from fwcortex.o(i.TIM2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from fwcortex.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from fwcortex.o(i.TIM4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from fwcortex.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from fwcortex.o(i.TIM6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from fwcortex.o(i.TIM7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from fwcortex.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from fwcortex.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from fwcortex.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from fwcortex.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from fwcortex.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from fwcortex.o(i.USB_HP_CAN1_TX_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from fwcortex.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from fwcortex.o(i.WWDG_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[53]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[55]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[123]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[124]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[56]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[125]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[126]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[127]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[128]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[129]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[130]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[131]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[132]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[133]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[134]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[135]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[136]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[137]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[138]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[139]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[5f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[13b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[13c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[13d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[13e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[13f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[140]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[141]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[54]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[142]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[57]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[59]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[143]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; USART485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[144]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[64]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[145]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[60]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[69]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmcortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutMsgToTxBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1IsRxBufEmpty
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetMsgFmRxBuf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskPutCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskGetCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntTaskResume
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntSemPost
</UL>

<P><STRONG><a name="[6a]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmcortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutMsgToTxBuf
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1IsRxBufEmpty
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetMsgFmRxBuf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskPutCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskGetCmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntTaskResume
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntSemPost
</UL>

<P><STRONG><a name="[be]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmcortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>

<P><STRONG><a name="[bb]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmcortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[c0]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmcortex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, asmcortex.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[146]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[149]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14a]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[14b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.ADC1_2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN1BufInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, can1cortex.o(i.CAN1BufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CAN1BufInit &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Init
</UL>

<P><STRONG><a name="[67]"></a>CAN1GetMsgFmRxBuf</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, can1cortex.o(i.CAN1GetMsgFmRxBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CAN1GetMsgFmRxBuf &rArr; OSSemPend &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
</UL>

<P><STRONG><a name="[6b]"></a>CAN1GetTxMsgFmBuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, can1cortex.o(i.CAN1GetTxMsgFmBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TxIntHook
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TransMsgFirst
</UL>

<P><STRONG><a name="[6d]"></a>CAN1HardInit</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, can1cortex.o(i.CAN1HardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN1HardInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Init
</UL>

<P><STRONG><a name="[77]"></a>CAN1Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, can1cortex.o(i.CAN1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CAN1Init &rArr; CAN1HardInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1BufInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>CAN1IsRxBufEmpty</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, can1cortex.o(i.CAN1IsRxBufEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CAN1IsRxBufEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
</UL>

<P><STRONG><a name="[7a]"></a>CAN1PutMsgToTxBuf</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, can1cortex.o(i.CAN1PutMsgToTxBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CAN1PutMsgToTxBuf &rArr; CAN1TransMsgFirst &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TransMsgFirst
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[7c]"></a>CAN1PutRxMsgToBuf</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, can1cortex.o(i.CAN1PutRxMsgToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = CAN1PutRxMsgToBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Rx0IntHook
</UL>

<P><STRONG><a name="[7d]"></a>CAN1Rx0IntHook</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, can1cortex.o(i.CAN1Rx0IntHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CAN1Rx0IntHook &rArr; CAN1PutRxMsgToBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutRxMsgToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>CAN1Start</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can1cortex.o(i.CAN1Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN1Start
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWIrqEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWCan1Task
</UL>

<P><STRONG><a name="[80]"></a>CAN1TaskLoop</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, can1cortex.o(i.CAN1TaskLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = CAN1TaskLoop &rArr; SAEProcessTxMsg &rArr; CAN1PutMsgToTxBuf &rArr; CAN1TransMsgFirst &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAECheckRxAllTimeOut
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1IsRxBufEmpty
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetTxMsgFmBuf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetMsgFmRxBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWCan1Task
</UL>

<P><STRONG><a name="[7b]"></a>CAN1TransMsgFirst</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, can1cortex.o(i.CAN1TransMsgFirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CAN1TransMsgFirst &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetTxMsgFmBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutMsgToTxBuf
</UL>

<P><STRONG><a name="[85]"></a>CAN1TxIntHook</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, can1cortex.o(i.CAN1TxIntHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = CAN1TxIntHook &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetTxMsgFmBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fwcortex.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fwcortex.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
</UL>

<P><STRONG><a name="[75]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f10x_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
</UL>

<P><STRONG><a name="[76]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
</UL>

<P><STRONG><a name="[74]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f10x_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
</UL>

<P><STRONG><a name="[73]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_can.o(i.CAN_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
</UL>

<P><STRONG><a name="[e8]"></a>CCP10DecodeRxPar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, can1cortex.o(i.CCP10DecodeRxPar))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCP10DecodeRxPar
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxCCPPAR
</UL>

<P><STRONG><a name="[e9]"></a>CCP10FillMsgTxReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, can1cortex.o(i.CCP10FillMsgTxReq))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxCCPREQ
</UL>

<P><STRONG><a name="[a0]"></a>DBCheckCurve</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dbcortex.o(i.DBCheckCurve))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[9e]"></a>DBCheckFunct</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dbcortex.o(i.DBCheckFunct))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[a2]"></a>DBCheckHstry</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dbcortex.o(i.DBCheckHstry))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[9c]"></a>DBCheckParam</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dbcortex.o(i.DBCheckParam))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[89]"></a>DBCmdBufInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dbcortex.o(i.DBCmdBufInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = DBCmdBufInit &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[8a]"></a>DBEepCheckRecord</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, dbcortex.o(i.DBEepCheckRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBEepCheckRecord
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashRead32u
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepInitHstryBlock
</UL>

<P><STRONG><a name="[8c]"></a>DBEepInitHstryBlock</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, dbcortex.o(i.DBEepInitHstryBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DBEepInitHstryBlock &rArr; DBEepWriteRecord &rArr; DBFlashWrite16p &rArr; DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetHstry
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashErasePage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteRecord
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepReadRecord
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepCheckRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[91]"></a>DBEepReadParam</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dbcortex.o(i.DBEepReadParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBEepReadParam
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashRead16u
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[8d]"></a>DBEepReadRecord</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dbcortex.o(i.DBEepReadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DBEepReadRecord &rArr; DBFlashRead16p
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashRead32u
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashRead16p
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepInitHstryBlock
</UL>

<P><STRONG><a name="[94]"></a>DBEepWriteParam</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, dbcortex.o(i.DBEepWriteParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DBEepWriteParam &rArr; DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite16u
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
</UL>

<P><STRONG><a name="[8f]"></a>DBEepWriteRecord</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dbcortex.o(i.DBEepWriteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DBEepWriteRecord &rArr; DBFlashWrite16p &rArr; DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite32u
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite16p
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepInitHstryBlock
</UL>

<P><STRONG><a name="[90]"></a>DBFlashErasePage</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, dbcortex.o(i.DBFlashErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBFlashErasePage &rArr; DBFlashIsPageErased
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWaitBank1Complete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashIsPageErased
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteRecord
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepInitHstryBlock
</UL>

<P><STRONG><a name="[98]"></a>DBFlashIsPageErased</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dbcortex.o(i.DBFlashIsPageErased))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DBFlashIsPageErased
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashErasePage
</UL>

<P><STRONG><a name="[93]"></a>DBFlashRead16p</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, dbcortex.o(i.DBFlashRead16p))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBFlashRead16p
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepReadRecord
</UL>

<P><STRONG><a name="[92]"></a>DBFlashRead16u</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dbcortex.o(i.DBFlashRead16u))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepReadParam
</UL>

<P><STRONG><a name="[8b]"></a>DBFlashRead32u</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dbcortex.o(i.DBFlashRead32u))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepReadRecord
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepCheckRecord
</UL>

<P><STRONG><a name="[96]"></a>DBFlashWrite16p</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, dbcortex.o(i.DBFlashWrite16p))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DBFlashWrite16p &rArr; DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite16u
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteRecord
</UL>

<P><STRONG><a name="[95]"></a>DBFlashWrite16u</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, dbcortex.o(i.DBFlashWrite16u))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWaitBank1Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite32u
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite16p
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteParam
</UL>

<P><STRONG><a name="[97]"></a>DBFlashWrite32u</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dbcortex.o(i.DBFlashWrite32u))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DBFlashWrite32u &rArr; DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite16u
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteRecord
</UL>

<P><STRONG><a name="[a9]"></a>DBGetBank1Status</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dbcortex.o(i.DBGetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBWaitBank1Complete
</UL>

<P><STRONG><a name="[f7]"></a>DBGetCurve08p</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dbcortex.o(i.DBGetCurve08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBGetCurve08p
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModGetParams
</UL>

<P><STRONG><a name="[f6]"></a>DBGetFunct08p</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, dbcortex.o(i.DBGetFunct08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBGetFunct08p
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModGetParams
</UL>

<P><STRONG><a name="[f8]"></a>DBGetMeasu08p</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dbcortex.o(i.DBGetMeasu08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBGetMeasu08p
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModGetParams
</UL>

<P><STRONG><a name="[f5]"></a>DBGetParam08p</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dbcortex.o(i.DBGetParam08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DBGetParam08p
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModGetParams
</UL>

<P><STRONG><a name="[9a]"></a>DBInit</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, dbcortex.o(i.DBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = DBInit &rArr; DBEepInitHstryBlock &rArr; DBEepWriteRecord &rArr; DBFlashWrite16p &rArr; DBFlashWrite16u &rArr; DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFFill16u
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetParam
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetHstry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetFunct
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetCurve
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInitDFlash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepReadParam
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepInitHstryBlock
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBCmdBufInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBCheckParam
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBCheckHstry
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBCheckFunct
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBCheckCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>DBInitDFlash</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbcortex.o(i.DBInitDFlash))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[a1]"></a>DBResetCurve</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dbcortex.o(i.DBResetCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBResetCurve &rArr; SFFill16u
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFFill16u
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[9f]"></a>DBResetFunct</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dbcortex.o(i.DBResetFunct))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBResetFunct &rArr; SFFill16u
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFFill16u
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[8e]"></a>DBResetHstry</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dbcortex.o(i.DBResetHstry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBResetHstry &rArr; SFFill16u
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFFill16u
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepInitHstryBlock
</UL>

<P><STRONG><a name="[9d]"></a>DBResetParam</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dbcortex.o(i.DBResetParam))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
</UL>

<P><STRONG><a name="[101]"></a>DBSetCurve08p</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dbcortex.o(i.DBSetCurve08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBSetCurve08p
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParams
</UL>

<P><STRONG><a name="[fc]"></a>DBSetCurve16u</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dbcortex.o(i.DBSetCurve16u))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParam
</UL>

<P><STRONG><a name="[100]"></a>DBSetFunct08p</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, dbcortex.o(i.DBSetFunct08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBSetFunct08p
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParams
</UL>

<P><STRONG><a name="[fb]"></a>DBSetFunct16u</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dbcortex.o(i.DBSetFunct16u))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParam
</UL>

<P><STRONG><a name="[102]"></a>DBSetMeasu08p</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dbcortex.o(i.DBSetMeasu08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBSetMeasu08p
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParams
</UL>

<P><STRONG><a name="[fd]"></a>DBSetMeasu16u</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dbcortex.o(i.DBSetMeasu16u))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParam
</UL>

<P><STRONG><a name="[ff]"></a>DBSetParam08p</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dbcortex.o(i.DBSetParam08p))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DBSetParam08p
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParams
</UL>

<P><STRONG><a name="[fa]"></a>DBSetParam16u</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dbcortex.o(i.DBSetParam16u))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParam
</UL>

<P><STRONG><a name="[a4]"></a>DBTaskLoop</STRONG> (Thumb, 384 bytes, Stack size 8 bytes, dbcortex.o(i.DBTaskLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DBTaskLoop &rArr; DBTskGetCmd &rArr; OSSemPend &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWatchdogFeed
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFFill16u
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskPutCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskGetCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashErasePage
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteRecord
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBEepWriteParam
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWDbTask
</UL>

<P><STRONG><a name="[a6]"></a>DBTskGetCmd</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, dbcortex.o(i.DBTskGetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DBTskGetCmd &rArr; OSSemPend &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
</UL>

<P><STRONG><a name="[a5]"></a>DBTskPutCmd</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, dbcortex.o(i.DBTskPutCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = DBTskPutCmd &rArr; OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParams
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParam
</UL>

<P><STRONG><a name="[99]"></a>DBWaitBank1Complete</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, dbcortex.o(i.DBWaitBank1Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DBWaitBank1Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashWrite16u
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBFlashErasePage
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fwcortex.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA1_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA1_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA1_Channel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA1_Channel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA1_Channel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA1_Channel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA2_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA2_Channel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.DMA2_Channel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>Delay1us</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd_botton.o(i.Delay1us))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_init_conf
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
</UL>

<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FWCan1Task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fwcortex.o(i.FWCan1Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = FWCan1Task &rArr; CAN1TaskLoop &rArr; SAEProcessTxMsg &rArr; CAN1PutMsgToTxBuf &rArr; CAN1TransMsgFirst &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fwcortex.o(i.OSTaskStat)
</UL>
<P><STRONG><a name="[50]"></a>FWDbTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fwcortex.o(i.FWDbTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = FWDbTask &rArr; DBTaskLoop &rArr; DBTskGetCmd &rArr; OSSemPend &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fwcortex.o(i.OSTaskStat)
</UL>
<P><STRONG><a name="[120]"></a>FWInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fwcortex.o(i.FWInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>FWInitClkHSI</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fwcortex.o(i.FWInitClkHSI))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>FWInitFLASH</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fwcortex.o(i.FWInitFLASH))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>FWInitPMC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fwcortex.o(i.FWInitPMC))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>FWInitRCC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fwcortex.o(i.FWInitRCC))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>FWIrqEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fwcortex.o(i.FWIrqEnable))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Start
</UL>

<P><STRONG><a name="[51]"></a>FWLcdTask</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, fwcortex.o(i.FWLcdTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = FWLcdTask &rArr; LCD_Line &rArr; LCD_Point &rArr; LCD_open_windows
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fwcortex.o(i.OSTaskStat)
</UL>
<P><STRONG><a name="[4f]"></a>FWSci1Task</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fwcortex.o(i.FWSci1Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = FWSci1Task &rArr; SCI1TaskLoop &rArr; SFProcessRxModMsg &rArr; SFModSetParams &rArr; DBTskPutCmd &rArr; OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1TaskLoop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fwcortex.o(i.OSTaskStat)
</UL>
<P><STRONG><a name="[106]"></a>FWTimerHook</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fwcortex.o(i.FWTimerHook))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[aa]"></a>FWWaitTaskSynchro</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fwcortex.o(i.FWWaitTaskSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = FWWaitTaskSynchro &rArr; OSTimeDly &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStat
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWXioTask
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWSci1Task
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWLcdTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWDbTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWCan1Task
</UL>

<P><STRONG><a name="[a7]"></a>FWWatchdogFeed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fwcortex.o(i.FWWatchdogFeed))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
</UL>

<P><STRONG><a name="[4d]"></a>FWXioTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fwcortex.o(i.FWXioTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = FWXioTask &rArr; FWWaitTaskSynchro &rArr; OSTimeDly &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fwcortex.o(i.OSTaskStat)
</UL>
<P><STRONG><a name="[70]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[af]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1SentData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[ae]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1SentData
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>LCD_FSMC_Config</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, lcd_botton.o(i.LCD_FSMC_Config))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init1
</UL>

<P><STRONG><a name="[ad]"></a>LCD_GPIO_Config</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, lcd_botton.o(i.LCD_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init1
</UL>

<P><STRONG><a name="[b0]"></a>LCD_Init1</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd_drive.o(i.LCD_Init1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Init1 &rArr; LCD_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_init_conf
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_data_start
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Rst
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>LCD_Line</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, lcd_drive.o(i.LCD_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_Line &rArr; LCD_Point &rArr; LCD_open_windows
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_direction
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWLcdTask
</UL>

<P><STRONG><a name="[b6]"></a>LCD_Point</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lcd_drive.o(i.LCD_Point))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Point &rArr; LCD_open_windows
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_open_windows
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
</UL>

<P><STRONG><a name="[b2]"></a>LCD_Rst</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lcd_botton.o(i.LCD_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Rst
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init1
</UL>

<P><STRONG><a name="[b7]"></a>LCD_open_windows</STRONG> (Thumb, 216 bytes, Stack size 12 bytes, lcd_botton.o(i.LCD_open_windows))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_open_windows
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Point
</UL>

<P><STRONG><a name="[b4]"></a>Lcd_data_start</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd_botton.o(i.Lcd_data_start))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init1
</UL>

<P><STRONG><a name="[b3]"></a>Lcd_init_conf</STRONG> (Thumb, 492 bytes, Stack size 4 bytes, lcd_botton.o(i.Lcd_init_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Lcd_init_conf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_direction
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1us
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init1
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
</UL>

<P><STRONG><a name="[110]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
</UL>

<P><STRONG><a name="[c2]"></a>OSCheckStack</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, oscortex.o(i.OSCheckStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSCheckStack
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStat
</UL>

<P><STRONG><a name="[b9]"></a>OSInit</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, oscortex.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTaskCreate &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>OSInitTimer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, oscortex.o(i.OSInitTimer))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, oscortex.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>OSIntExit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, oscortex.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HP_CAN1_TX_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>OSIntSemPost</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, oscortex.o(i.OSIntSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutRxMsgToBuf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetTxMsgFmBuf
</UL>

<P><STRONG><a name="[bc]"></a>OSIntTaskResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, oscortex.o(i.OSIntTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2IntHook
</UL>

<P><STRONG><a name="[bd]"></a>OSSched</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, oscortex.o(i.OSSched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[66]"></a>OSSemCreate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oscortex.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1BufInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBCmdBufInit
</UL>

<P><STRONG><a name="[68]"></a>OSSemPend</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, oscortex.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutMsgToTxBuf
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1GetMsgFmRxBuf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskGetCmd
</UL>

<P><STRONG><a name="[a8]"></a>OSSemPost</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, oscortex.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskPutCmd
</UL>

<P><STRONG><a name="[bf]"></a>OSStart</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, oscortex.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>OSStatInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oscortex.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStat
</UL>

<P><STRONG><a name="[ba]"></a>OSTaskCreate</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, oscortex.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStat
</UL>

<P><STRONG><a name="[4b]"></a>OSTaskIdle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, oscortex.o(i.OSTaskIdle))
<BR>[Address Reference Count : 1]<UL><LI> oscortex.o(i.OSInit)
</UL>
<P><STRONG><a name="[4c]"></a>OSTaskStat</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, fwcortex.o(i.OSTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTaskStat &rArr; OSTaskCreate &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCheckStack
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oscortex.o(i.OSInit)
</UL>
<P><STRONG><a name="[c3]"></a>OSTaskSuspend</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, oscortex.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1TaskLoop
</UL>

<P><STRONG><a name="[81]"></a>OSTimeDly</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, oscortex.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSched
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStat
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWXioTask
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWWaitTaskSynchro
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWSci1Task
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWLcdTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWDbTask
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWCan1Task
</UL>

<P><STRONG><a name="[107]"></a>OSTimeTick</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, oscortex.o(i.OSTimeTick))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Tim2_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[88]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[6e]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1HardInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Config
</UL>

<P><STRONG><a name="[111]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[11b]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SAECheckRxAllTimeOut</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, saej1939.o(i.SAECheckRxAllTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAECheckRxAllTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFCheckTime
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
</UL>

<P><STRONG><a name="[78]"></a>SAEInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, saej1939.o(i.SAEInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SAEInit &rArr; SAEUpdataTxPgnAddrAll &rArr; SAEUpdataTxPgnAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdataTxPgnAddrAll
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAETxPgnTblInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAERxPgnTblInit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Init
</UL>

<P><STRONG><a name="[82]"></a>SAEProcessRxMsg</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, saej1939.o(i.SAEProcessRxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SAEProcessRxMsg &rArr; SAEUpdateRxCCPPAR &rArr; CCP10DecodeRxPar
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFCheckTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxVEHSPD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxVEHPOW
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxLFE
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxLFC
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxINCON
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxENGTEMP
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxENGHOUR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxEFL
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxEEC3
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxEEC2
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxEEC1
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxDM4
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxDM2
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxDM11ACK
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxDM1
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxCRPRESS
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxCNFPBAM
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxCNFPACK
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxCCPPAR
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateRxAMCON
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
</UL>

<P><STRONG><a name="[84]"></a>SAEProcessTxMsg</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, saej1939.o(i.SAEProcessTxMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SAEProcessTxMsg &rArr; CAN1PutMsgToTxBuf &rArr; CAN1TransMsgFirst &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1PutMsgToTxBuf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFCheckTime
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF08
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF07
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF06
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF05
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF04
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF03
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF02
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF01
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxSELF00
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxPGNRQ
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdateTxCCPREQ
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TaskLoop
</UL>

<P><STRONG><a name="[c5]"></a>SAERxPgnTblInit</STRONG> (Thumb, 548 bytes, Stack size 8 bytes, saej1939.o(i.SAERxPgnTblInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAERxPgnTblInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEInit
</UL>

<P><STRONG><a name="[c6]"></a>SAETxPgnTblInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, saej1939.o(i.SAETxPgnTblInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAETxPgnTblInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEInit
</UL>

<P><STRONG><a name="[e7]"></a>SAEUpdataTxPgnAddr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, saej1939.o(i.SAEUpdataTxPgnAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAEUpdataTxPgnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdataTxPgnAddrAll
</UL>

<P><STRONG><a name="[c7]"></a>SAEUpdataTxPgnAddrAll</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, saej1939.o(i.SAEUpdataTxPgnAddrAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SAEUpdataTxPgnAddrAll &rArr; SAEUpdataTxPgnAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEUpdataTxPgnAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEInit
</UL>

<P><STRONG><a name="[cb]"></a>SAEUpdateRxAMCON</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxAMCON))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[db]"></a>SAEUpdateRxCCPPAR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, saej1939.o(i.SAEUpdateRxCCPPAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SAEUpdateRxCCPPAR &rArr; CCP10DecodeRxPar
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP10DecodeRxPar
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[ce]"></a>SAEUpdateRxCNFPACK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxCNFPACK))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[cd]"></a>SAEUpdateRxCNFPBAM</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxCNFPBAM))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[da]"></a>SAEUpdateRxCRPRESS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxCRPRESS))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d3]"></a>SAEUpdateRxDM1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxDM1))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d6]"></a>SAEUpdateRxDM11ACK</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxDM11ACK))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d4]"></a>SAEUpdateRxDM2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxDM2))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d5]"></a>SAEUpdateRxDM4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxDM4))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[c8]"></a>SAEUpdateRxEEC1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxEEC1))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[c9]"></a>SAEUpdateRxEEC2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxEEC2))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[ca]"></a>SAEUpdateRxEEC3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxEEC3))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d1]"></a>SAEUpdateRxEFL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxEFL))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d9]"></a>SAEUpdateRxENGHOUR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxENGHOUR))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[cf]"></a>SAEUpdateRxENGTEMP</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxENGTEMP))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d7]"></a>SAEUpdateRxINCON</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxINCON))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d2]"></a>SAEUpdateRxLFC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxLFC))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d0]"></a>SAEUpdateRxLFE</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxLFE))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[d8]"></a>SAEUpdateRxVEHPOW</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxVEHPOW))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[cc]"></a>SAEUpdateRxVEHSPD</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateRxVEHSPD))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
</UL>

<P><STRONG><a name="[dd]"></a>SAEUpdateTxCCPREQ</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, saej1939.o(i.SAEUpdateTxCCPREQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SAEUpdateTxCCPREQ
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCP10FillMsgTxReq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[dc]"></a>SAEUpdateTxPGNRQ</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxPGNRQ))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[de]"></a>SAEUpdateTxSELF00</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF00))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[df]"></a>SAEUpdateTxSELF01</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF01))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e0]"></a>SAEUpdateTxSELF02</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF02))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e1]"></a>SAEUpdateTxSELF03</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF03))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e2]"></a>SAEUpdateTxSELF04</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF04))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e3]"></a>SAEUpdateTxSELF05</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF05))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e4]"></a>SAEUpdateTxSELF06</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF06))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e5]"></a>SAEUpdateTxSELF07</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF07))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[e6]"></a>SAEUpdateTxSELF08</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, saej1939.o(i.SAEUpdateTxSELF08))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
</UL>

<P><STRONG><a name="[ea]"></a>SCI1RxIntHook</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart1cortex.o(i.SCI1RxIntHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCI1RxIntHook &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ac]"></a>SCI1TaskLoop</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, usart1cortex.o(i.SCI1TaskLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SCI1TaskLoop &rArr; SFProcessRxModMsg &rArr; SFModSetParams &rArr; DBTskPutCmd &rArr; OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFUSARTRecordTxMesure
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessRxModMsg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessHostRxModMsg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1SentData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWSci1Task
</UL>

<P><STRONG><a name="[f2]"></a>SFCheckModMsgCrc</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, sfcortex.o(i.SFCheckModMsgCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SFCheckModMsgCrc &rArr; SFGetCrc16Code
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFGetCrc16Code
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessRxModMsg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessHostRxModMsg
</UL>

<P><STRONG><a name="[c4]"></a>SFCheckTime</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sfcortex.o(i.SFCheckTime))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessTxMsg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAEProcessRxMsg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAECheckRxAllTimeOut
</UL>

<P><STRONG><a name="[a3]"></a>SFFill16u</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, sfcortex.o(i.SFFill16u))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SFFill16u
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTaskLoop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetHstry
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetFunct
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBResetCurve
</UL>

<P><STRONG><a name="[f3]"></a>SFGetCrc16Code</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sfcortex.o(i.SFGetCrc16Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SFGetCrc16Code
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFCheckModMsgCrc
</UL>

<P><STRONG><a name="[f4]"></a>SFModGetParams</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, sfcortex.o(i.SFModGetParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SFModGetParams &rArr; DBGetParam08p
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGetParam08p
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGetMeasu08p
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGetFunct08p
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGetCurve08p
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessRxModMsg
</UL>

<P><STRONG><a name="[f9]"></a>SFModSetParam</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, sfcortex.o(i.SFModSetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SFModSetParam &rArr; DBTskPutCmd &rArr; OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskPutCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetParam16u
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetMeasu16u
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetFunct16u
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetCurve16u
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessRxModMsg
</UL>

<P><STRONG><a name="[fe]"></a>SFModSetParams</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sfcortex.o(i.SFModSetParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = SFModSetParams &rArr; DBTskPutCmd &rArr; OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBTskPutCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetParam08p
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetMeasu08p
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetFunct08p
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBSetCurve08p
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessRxModMsg
</UL>

<P><STRONG><a name="[ee]"></a>SFProcessHostRxModMsg</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sfcortex.o(i.SFProcessHostRxModMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SFProcessHostRxModMsg &rArr; SFCheckModMsgCrc &rArr; SFGetCrc16Code
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFUSARTRecordMesure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFCheckModMsgCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1TaskLoop
</UL>

<P><STRONG><a name="[ef]"></a>SFProcessRxModMsg</STRONG> (Thumb, 660 bytes, Stack size 24 bytes, sfcortex.o(i.SFProcessRxModMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SFProcessRxModMsg &rArr; SFModSetParams &rArr; DBTskPutCmd &rArr; OSSemPost &rArr; OSSched
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParams
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModSetParam
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFModGetParams
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFCheckModMsgCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1TaskLoop
</UL>

<P><STRONG><a name="[103]"></a>SFUSARTRecordMesure</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, sfcortex.o(i.SFUSARTRecordMesure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFUSARTRecordMesure
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFProcessHostRxModMsg
</UL>

<P><STRONG><a name="[f1]"></a>SFUSARTRecordTxMesure</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, sfcortex.o(i.SFUSARTRecordTxMesure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFUSARTRecordTxMesure
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1TaskLoop
</UL>

<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.SPI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>Set_direction</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, lcd_botton.o(i.Set_direction))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Line
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_init_conf
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fwcortex.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWTimerHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>TIM2_Configuration</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart1cortex.o(i.TIM2_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_Configuration &rArr; TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Tim2_Init
</UL>

<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fwcortex.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; Tim2IntHook &rArr; OSIntTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2IntHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10f]"></a>TIM2_NVIC_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart1cortex.o(i.TIM2_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Tim2_Init
</UL>

<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fwcortex.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10b]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[113]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2IntHook
</UL>

<P><STRONG><a name="[10d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Tim2_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[109]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[112]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim2IntHook
</UL>

<P><STRONG><a name="[10c]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[10a]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
</UL>

<P><STRONG><a name="[10e]"></a>Tim2IntHook</STRONG> (Thumb, 578 bytes, Stack size 8 bytes, usart1cortex.o(i.Tim2IntHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Tim2IntHook &rArr; OSIntTaskResume
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntTaskResume
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fwcortex.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fwcortex.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>USART1SentData</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usart1cortex.o(i.USART1SentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1SentData &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1TaskLoop
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fwcortex.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; SCI1RxIntHook &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1RxIntHook
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fwcortex.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fwcortex.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>USART485_DataInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart1cortex.o(i.USART485_DataInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>USART485_Init</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, usart1cortex.o(i.USART485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>USART485_Tim2_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart1cortex.o(i.USART485_Tim2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART485_Tim2_Init &rArr; TIM2_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_NVIC_Configuration
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Configuration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1RxIntHook
</UL>

<P><STRONG><a name="[118]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
</UL>

<P><STRONG><a name="[115]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1SentData
</UL>

<P><STRONG><a name="[ec]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1RxIntHook
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1SentData
</UL>

<P><STRONG><a name="[119]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
</UL>

<P><STRONG><a name="[117]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
</UL>

<P><STRONG><a name="[ed]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCI1RxIntHook
</UL>

<P><STRONG><a name="[114]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1SentData
</UL>

<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fwcortex.o(i.USB_HP_CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USB_HP_CAN1_TX_IRQHandler &rArr; CAN1TxIntHook &rArr; CAN1GetTxMsgFmBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1TxIntHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fwcortex.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; CAN1Rx0IntHook &rArr; CAN1PutRxMsgToBuf &rArr; OSIntSemPost
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Rx0IntHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fwcortex.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fwcortex.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = main &rArr; USART485_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Tim2_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_DataInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitTimer
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init1
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWInitRCC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWInitPMC
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWInitFLASH
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWInitClkHSI
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[104]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[105]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
